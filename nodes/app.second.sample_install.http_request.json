{
  "name": "app.second.sample_install.http_request",
  "type": "types.second.default.code.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--App--', SELF.name);\n      \n      \n      // Route handling: \n      // - check for /api or /frontend \n      // - default to showing the \"app chooser\" screen \n      let {\n        req,\n        res \n      } = universe.requestsCache[universe.requestId];\n      \n      // // execCodeNode\n      // res.send('ok2');\n      \n      // - of the action! (expecting/requiring it to be a Node w/ code....how to verify that? logic vs data?) \n      let appResult;\n      let codeNode = await universe.getNodeAtPath( universe.navPathv1(SELF.name, 1) ); \n      try {\n        // console.log('Getting appResult');\n        console.log('Testing build nodejs modules...');\n        appResult = await universe.execCodeNode({\n          codeNode,\n          dataNode: INPUT, // passes express obj, with req, res \n        });\n        // res.send('ok3');\n      }catch(err){\n        res.send('failed1');\n        return resolve('FAILED code from from_http, trying to run route', err);\n      }\n      \n      \n      return resolve();\n      \n      console.log('ROUTE:', req.originalUrl);\n      \n      \n      if(req.originalUrl.indexOf('/frontend') > -1){\n        console.log('Returning frontend');\n        // return frontend code (all nodes)\n        let frontendNode = await universe.getNodeAtPath( universe.navPathv1(SELF.name, 1, 'frontend') );\n        let frontendNodes = [];\n        function toArray(node){\n          node.name = node.name.substr(frontendNode.name.length + 1);\n          frontendNodes.push(node);\n          if(node.nodes){\n            for(let node2 of node.nodes){\n              toArray(node2);\n            }\n            delete node.nodes; // cleanup\n          }\n        }\n        for(let node of frontendNode.nodes){\n          toArray(node);\n        }\n        await universe.httpResponse('send', frontendNodes); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n        \n        return resolve(true);\n      }\n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>DevEditor</title>\n              \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n        \n            <script src=\"https://unpkg.com/ipfs/dist/index.min.js\"></script>\n            \n            <link href=\"https://s3-us-west-1.amazonaws.com/seconddev3-public/defaultplatform/0.1.0/main.css?_=${Date.now()}\" rel=\"stylesheet\">\n            \n            <script defer src=\"https://use.fontawesome.com/releases/v5.0.13/js/all.js\" integrity=\"sha384-xymdQtn1n3lH2wcu0qhcdaOpQwyoarkgLVxC/wZ5q7h9gHtxICrpcaSUfygqZGOe\" crossorigin=\"anonymous\"></script>\n            \n          </head>\n          <body>\n            <div id=\"root\"></div>\n            <!-- Supply platform to load -->\n            <!-- Supply environment to load into platform (.zip, github link, or internal app) -->\n            <script type=\"text/javascript\">\n              window.limitedToAppName = 'Test App Install Required Service';\n              // window.useLastOfAppId = 'deveditor';\n              window.limitedToAppZip = '/app/app.second.sample_install/frontend';\n              window.useLastOfAppId = '/app/app.second.sample_install/frontend';\n              // window.limitedToAppZip = '/appzip?appId=toolbox'; // local url \n              // window.limitedToAppVersion = 1; \n              window.disallowAutoLaunchCancel = false; // should prevent the \"Startup...\" from even showing...\n              window.startupDelay = 2000;\n              window.appBaseUrl = '/app/app.second.sample_install';\n              \n              window.DEFAULT_INPUT_PATH = 'services.second.default_frontend.input';\n              \n              //window.defaultExternalIdentityNode = JSON.parse(atob(\"$----{identityNode}\"));\n            \n            </script>\n            <script type=\"text/javascript\" src=\"https://s3-us-west-1.amazonaws.com/seconddev3-public/defaultplatform/0.1.0/main.v20.js?v=4\"></script>\n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      console.error(err);\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-02T22:50:04.228Z",
  "updatedAt": "2019-03-13T23:44:48.840Z",
  "nodes": []
}